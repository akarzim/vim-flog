" File:        ruby-complexity.vim
" Description: Ruby cyclomatic complexity analizer
" Author:      Max Vasiliev <vim@skammer.name>
" Licence:     WTFPL
" Version:     0.0.1
"
" This will add cyclomatic complexity annotations to your source code. It is
" no longer wrong (as previous versions were!)


if !has('signs')
    finish
endif
if !has('ruby')
    finish
endif

ruby << EOF
def show_complexity
  results = {}

  IO.popen("~/.vim/bundle/ruby-complexity/plugin/lflog -a #{VIM::Buffer.current.name}").readlines.each do |line|
    # 27.1: Page#categories                  -:261
    if line.match(/([0-9.]+): (\S+)\s+[^:]+:(\d+):(\d+)/)
      score = $1.to_f.ceil
      method_name = $2
      line_number = $3.to_i
      endline_number = $4.to_i
      results[line_number] = [score, method_name, endline_number]
    end
  end

  VIM.command ":sign unplace *"
  results.keys.sort {|a,b| a <=> b }.each do |line_number|
    # TODO: Find range of line numbers for each method
    complexity = case results[line_number][0]
      when 0..7 then "low_complexity"
      when 7..14 then "medium_complexity"
      else "high_complexity"
    end

    (line_number..results[line_number][2]).each do |line|
      VIM.command ":sign place #{line} line=#{line} name=#{complexity} file=#{VIM::Buffer.current.name}"
    end
  end
end
EOF

function! ShowComplexity()
ruby << EOF
show_complexity
EOF
" no idea why it is needed to update colors each time
" to actually see the colors
hi low_complexity guifg=#005e00 guibg=#005e00
hi medium_complexity guifg=#bbbb00 guibg=#bbbb00
hi high_complexity guifg=#ff2222 guibg=#ff2222
endfunction

hi SignColumn guifg=fg guibg=bg
hi low_complexity guifg=#005e00 guibg=#005e00
hi medium_complexity guifg=#bbbb00 guibg=#bbbb00
hi high_complexity guifg=#ff2222 guibg=#ff2222

sign define low_complexity text=XX texthl=low_complexity
sign define medium_complexity text=XX texthl=medium_complexity
sign define high_complexity text=XX texthl=high_complexity

autocmd! BufReadPost,BufWritePost,FileReadPost,FileWritePost *.rb call ShowComplexity()
